import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { getDataSourceToken } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';
import { Admin } from './admin.entity';
import * as bcrypt from 'bcrypt';

async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);

  try {
    // –ü–æ–ª—É—á–∞–µ–º DataSource
    const dataSource = app.get<DataSource>(getDataSourceToken());

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Admin
    const adminRepository = dataSource.getRepository(Admin);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    const adminCount = await adminRepository.count();

    if (adminCount === 0) {
      const hashedPassword = await bcrypt.hash('admin123', 10);

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
      const admin = adminRepository.create({
        username: 'admin',
        password: hashedPassword,
        fullName: '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        isSuperAdmin: true,
        permissions: [
          'users.manage',
          'cars.manage',
          'workers.manage',
          'services.manage',
        ],
        isActive: true,
      });

      await adminRepository.save(admin);

      console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      console.log('üë®‚Äçüíº –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: admin');
      console.log('üîë –ü–∞—Ä–æ–ª—å: admin123');
      console.log('‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');
    } else {
      console.log('üë®‚Äçüíº –ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
  } finally {
    await app.close();
  }
}

bootstrap();
